Inserindo 'A':

[A]

Inserindo 'B':

[A] + B → [A|B]

Inserindo 'C':

1. [A|B] + C      2.    [B]
                      /     \
                   [A]       [C]

Inserindo 'D':

1.    [B]         2.    [B]
    /     \          /     \
  [A]     [C] + D  [A]    [C|D]

Inserindo 'E':

1.    [B]              2.    [B]              3. [B|D]
    /     \                /     \              /  |  \
  [A]    [C|D] + E      [A]     [D]           [A] [C] [E]
                              /     \
                            [C]     [E]

                            
                            
1. inserirNaArvore(arvore, "E", raiz=[B])
    // Não é NULL
    // Não é duplicata
    // Não é folha
    // "E" > "B" Então iremos para a direita 
    └─> 2. inserirNaArvore(arvore, "E", raiz=[C|D])
            // Não é NULL
            // Não é duplicata
            // É folha! 
            └─> CriarNovoNode("E") → novoNo=[E]
            └─> adicionarNode(noAtual=[C|D], novoNo=[E])
                // Tem chaveNaDireita, cai no caso 3 (split)
                // Cria newNode=[D]
                // Reorganiza ponteiros
                └─> retorna [D] com filhos [C] e [E]
        └─> newNode=[D] diferente de raiz->ponteiroDoMeio
        └─> adicionarNode(noAtual=[B], novoNo=[D])
            // Não tem chaveNaDireita
            // "B" < "D", adiciona à direita
            // Adiciona "D" como chaveNaDireita
            // Reorganiza ponteiros: [C] e [E]
            └─> retorna [B|D] com filhos [A], [C] e [E] 
            Esse  [B|D] será a nova raiz da árvore    

Inserindo 'F':

1.   [B|D]            2.   [B|D]
    /  |  \              /  |  \
  [A] [C] [E] + F     [A] [C] [E|F]

Inserindo 'G':

1.   [B|D]              2.     [D]              3.     [D]
    /  |  \                  /     \                 /     \
  [A] [C] [E|F] + G      [B]       [F]           [B]       [F]
                        /  \      /     \       /  \      /  \
                      [A] [C]   [E]    [G]    [A] [C]   [E] [G]
